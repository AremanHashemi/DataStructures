 2)
 For the items in the 5-element table of Table 7.3, 
 compute hashCode() % table.length for lengths of 7 and 13. 
 What would be the position of each word in tables of these sizes using open addressing and linear probing?
  Answer the same question for chaining.
  

"Tom"	84274	  mod7 = 1	mod13 =8
"Dick"	2129869	  mod7 = 0	mod13 =1
"Harry"	69496448  mod7 = 0	mod13 =8
"Sam"	82879	  mod7 = 6	mod13 =4
"Pete"	2484038	  mod7 = 4	mod13 =11



Open Addressing 
0 "Dick"
1 "Tom"
2 "Harry"
3 
4 "Pete"
5 
6 "Sam"


0 
1 "Dick"
2 
3 
4 "Sam"
5 
6 
7 
8 "Tom"
9 "Harry"	
10 
11 "Pete"
12 

Chaining


0 "Dick" - "Harry"
1 "Tom"
2
3
4 "Pete"
5
6 "Harry"

0
1 "Dick"
2
3
4 "Sam"
5
6
7
8 "Tom" - "Harry"
9
10
11 "Pete"
12


3)
Index	Key
[0]		24
[1]		6
[2]		20
[3]
[4]		14

24 mod 5 = 4
6  mod 5 = 1
20 mod 5 = 0
14 mod 5 = 4


Order keys inserted
14
24
6
20


Chaining
Index	Key
[0]		20
[1]		6
[2]		
[3]		
[4]		14 24


Pg 1)

public static int findPos(HashTable [] table, Object value)
{
	int index = hashCode() % table.length;
	if (table[index] == null)
	{
		return -1;
	}
	else if(table[index].isEqual(value))
	{
		return index;
	}
	else
	{
		for(int i = index+1; i != index; i++)
		{
			if(index == table.length)
			{
				i = 0;
			}
			if(table[index].isEqual(value))
			{
				return index;
			}
		}
	}

}
