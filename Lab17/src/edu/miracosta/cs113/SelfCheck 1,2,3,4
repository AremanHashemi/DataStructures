SelfCheck 1,2,3,4

Self Check 1 add "apple" "cat" "hat" to the quick brown fox avl tree
1)
						jumps
		brown						quick
	The			fox				over		the
			dog				lazy
			
2) add apple
							jumps
			brown						quick
	The				fox				over		the
		apple	dog				lazy

3) add cat

							jumps
			brown							quick
	The				dog					over		the
		apple	cat		fox			lazy
		
4) add hat

							jumps
			brown							quick
	The				dog					over		the
		apple	cat		fox			lazy
							hat
							
Self check 2 

1) rotate right 
				50 -2
		25 +1	 	c
	a		b
	
	
				25 +2
			a			50 -1
			 		b		c
2) why doesnt this fix the problem
	Because the imbalance lies at b by flipping b to the other side with a right rotation you're just moving the imbalance
	

Self Check 3
Build an AVL tree that inserts the integers 30, 40, 15, 25, 90, 80, 70, 85, 15, 72 in the given order.

						30
			15						80
				25			70				90
						40		72		85
						
Self Check 4
Build the AVL tree from the sentence “Now is the time for all good men to come to the aid of the party”.

									is
					all								the
			now				for			  	of			time
				aid		come   good 	men	  party			to
				
				
				
Programming 1
Symmetric with rebalance  left

 private AVLNode<E> rebalanceRight(AVLNode<E> localRoot)
    {
        AVLNode<E> rightChild = (AVLNode<E>) localRoot.right;
        if (rightChild.balance > AVLNode.BALANCED)
        {
            AVLNode<E> rightLeftChild = (AVLNode<E>) rightChild.left;
            if (rightLeftChild.balance < AVLNode.BALANCED)
            {
                rightChild.balance = AVLNode.LEFT_HEAVY;
                rightLeftChild.balance = AVLNode.BALANCED;
                localRoot.balance = AVLNode.BALANCED;
            }
            else if (rightLeftChild.balance > AVLNode.BALANCED)
            {
                rightChild.balance = AVLNode.BALANCED;
                rightLeftChild.balance = AVLNode.BALANCED;
                localRoot.balance = AVLNode.RIGHT_HEAVY;
            } 
            else
            {
                rightChild.balance = AVLNode.BALANCED;
                localRoot.balance = AVLNode.BALANCED;
            }
            localRoot.right = rotateRight(rightChild);
        }
        else
        {  
            rightChild.balance = AVLNode.BALANCED;
            localRoot.balance = AVLNode.BALANCED;
        }
        return (AVLNode<E>) rotateLeft(localRoot);
    }

	