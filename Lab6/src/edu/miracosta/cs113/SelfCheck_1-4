
1. What is the big-O for the single-linked list get operation? 
	O(n)
2. What is the big-O for the set operation? 
	O(n) 
3. What is the big-O for each add method? 
	O(n) to add to a spot 
	O(1) to add to the head or tail
4. Draw a single-linked list of Integer objects containing the integers 5, 10, 7, and
30 and referenced by head. 
Complete the following fragment, which adds all Integer objects in a list. 
Your fragment should walk down the list, adding all integer values to sum. int sum = 0;

|5|-->|10|-->|7|-->|30|-->null

Node<Integer> nodeRef = head;
while (nodeRef != null)
 { 
 	int next = nodeRef.data; 
 	sum += next; 
 	nodeRef =  nodeRef.next;
}
5. For the single-linked list in Figure 2.16, data field head (type Node) references the first node.
 Explain the effect of each statement in the following fragments. 
 a. head = new Node<String>("Shakira", head.next); 
 	Puts a node with data "Shakira" at the start of the list
 	
 b. Node<String> nodeRef = head.next;
    nodeRef.next = nodeRef.next.next;
    1)nodeRef points to second Item on list
    2)nodeRef.next points to the fourth item, deleting the third item "Harry" if you include "Shakira" at the start
    
c.  Node<String> nodeRef = head; 
	while (nodeRef.next != null)
		nodeRef = nodeRef.next; 
	nodeRef.next = new Node<String>("Tamika");
	Adds Node with "Tamika" data to the end of the list
	
d. Node<String> nodeRef = head;
   while (nodeRef != null && !nodeRef.data.equals("Harry"))
   		nodeRef = nodeRef.next; 
   	if (nodeRef != null) 
    {
		nodeRef.data = "Sally";
		 nodeRef.next = new Node<String>("Harry", nodeRef.next.next);
	}

	Finds data "Harry" in the list and changes the data to "Sally", creates new Node with "Harry" inserts it behind "Sally"